name: Build file

on:
  push:
    branches: [ main ]
  workflow_dispatch:
concurrency:
  group: hosted-${{ github.event.pull_request.number || github.run_id }}
  cancel-in-progress: true
jobs:
  
  build_windows:
        runs-on: ${{ matrix.os }}
    
        strategy:
          matrix:
            build_type: [Release]
            bitness: [64, arm64]
            os: [windows-2019]
        
    
        steps:
        
        - name: Setup the build paths
          shell: powershell
          id: build_paths
          run: |
            $rel_src_path = "w\src"
            $rel_build_path = "w\build"
            $rel_sccache_path = "w\sccache"
            $rel_downloads_path = "w\downloads"
            $rel_install_path = "w\install"
            $rel_package_data_path = "w\package_data"
            $rel_packaging_path = "w\osquery-packaging"
    
            New-Item -ItemType Directory -Force -Path $rel_build_path
            New-Item -ItemType Directory -Force -Path $rel_sccache_path
            New-Item -ItemType Directory -Force -Path $rel_downloads_path
            New-Item -ItemType Directory -Force -Path $rel_install_path
            New-Item -ItemType Directory -Force -Path $rel_package_data_path
    
            $base_dir = (Get-Item .).FullName
    
            echo "SOURCE=$base_dir\$rel_src_path" >> $env:GITHUB_OUTPUT
            echo "REL_SOURCE=$rel_src_path" >> $env:GITHUB_OUTPUT
            echo "BINARY=$base_dir\$rel_build_path" >> $env:GITHUB_OUTPUT
            echo "SCCACHE=$base_dir\$rel_sccache_path" >> $env:GITHUB_OUTPUT
            echo "DOWNLOADS=$base_dir\$rel_downloads_path" >> $env:GITHUB_OUTPUT
            echo "INSTALL=$base_dir\$rel_install_path" >> $env:GITHUB_OUTPUT
            echo "PACKAGING=$base_dir\$rel_packaging_path" >> $env:GITHUB_OUTPUT
            echo "PACKAGE_DATA=$base_dir\$rel_package_data_path" >> $env:GITHUB_OUTPUT
        

    
        - name: Setup the VC arch
          shell: powershell
          id: vc_arch
          run: |
            $arch = switch ("${{ matrix.bitness }}")
            {
                "64" { "x64" }
                "arm64" { "x64_arm64" }
            }
            echo "VC_ARCH=$arch" >> $env:GITHUB_OUTPUT
    
        
        - name: Configure git
          run: |
            git config --global core.autocrlf false
            git config --global core.symlinks true
    
        
        - name: Clone the osquery-packaging repository
          uses: actions/checkout@v2
          with:
            fetch-depth: 0
            path: ${{ steps.build_paths.outputs.PACKAGING }}

        # - name: install dependencies
        #   run: |
        #     pip3 install pyinstaller
        #     pip3 install requests
        #     pip3 install PyQt5
        #     pip3 install packaging

        # - name: create vistar agent app
        #   shell: cmd
        #   working-directory: ${{steps.build_paths.outputs.PACKAGING}}
        #   run: |
        #     pyinstaller --onefile Vistar.py
        #     dir
            

        # - name: upload artifact
        #   uses: actions/upload-artifact@v2
        #   with:
        #     name: executable app with pyinstaller
        #     path: ${{steps.build_paths.outputs.PACKAGING}}\dist\*.exe

        
        # TODO: Implement a cache so we don't keep hitting the server at each run
        - name: Install CMake
          working-directory: ${{ steps.build_paths.outputs.DOWNLOADS }}
          shell: powershell
          run: |
            $long_cmake_ver = "3.21.4"
            $short_cmake_ver = $($long_cmake_ver.split(".")[0] + "." + $long_cmake_ver.split(".")[1])
    
            $folder_name = $("cmake-" + $long_cmake_ver + "-windows-x86_64")
            $archive_name = $($folder_name + ".zip")
    
            $url = $("https://cmake.org/files/v" + $short_cmake_ver + "/" + $archive_name)
    
            (New-Object System.Net.WebClient).DownloadFile($url, $archive_name)
            7z x -o${{ steps.build_paths.outputs.INSTALL }} -y $archive_name
    
            echo "${{ steps.build_paths.outputs.INSTALL }}\$folder_name\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
    
        
        - name: Create the packages
          shell: cmd
          working-directory: ${{ steps.build_paths.outputs.PACKAGING }}  # Set the working directory to the root of the repository
          run: |
            call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvarsall.bat" ${{ steps.vc_arch.outputs.VC_ARCH }}
            @echo on

            

            cmake -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} ^
              -DOSQUERY_DATA_PATH=Windows ^
              ${{ steps.build_paths.outputs.PACKAGING }}

            if %errorlevel% neq 0 exit /b %errorlevel%

            cmake --build . ^
              --config Release ^
              --target package

            if %errorlevel% neq 0 exit /b %errorlevel%

    
            
    
        - name: Locate the packages
          working-directory: ${{ steps.build_paths.outputs.PACKAGE_BUILD }}
          id: packages
          shell: bash
          run: |
            echo "REL_UNSIGNED_RELEASE_PACKAGE_DATA_PATH=$(ls *.zip)" >> $GITHUB_OUTPUT
            echo "REL_UNSIGNED_RELEASE_MSI_PATH=$(ls *.msi)" >> $GITHUB_OUTPUT
            echo "REL_UNSIGNED_RELEASE_NUPKG_PATH=$(ls *.nupkg)" >> $GITHUB_OUTPUT
        - name: upload artifact
          uses: actions/upload-artifact@v2
          with:
              name: executable app with pyinstaller
              path: ${{ steps.build_paths.outputs.PACKAGING }}\*.msi